<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE scripts PUBLIC "-//UniTime//DTD University Course Timetabling/EN" "http://www.unitime.org/interface/Script.dtd">

<!--
 * Licensed to The Apereo Foundation under one or more contributor license
 * agreements. See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.
 *
 * The Apereo Foundation licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 -->

<scripts created="January 22, 2016">
<script name="Learning Communities: Course Matrix Import" permission="Student Group Edit" engine="python" created="Fri Jan 22 10:10:59 EST 2016">
  <description><![CDATA[This script creates student groups and student group reservations according to the input file (LC Course Matrix in CSV format).]]></description>
  <parameter name="file" label="Input File" type="file"/>
  <body><![CDATA[import csv
import re
from org.unitime.timetable.model import StudentGroup
from org.unitime.timetable.model import StudentGroupReservation
from java.util import HashSet

def getGroupCode(name):
    m = re.search('(.+) - (.+)', name)
    if m:
        return m.group(1)
    m = re.search('(.+) \(.+\)', name)
    if m: name = m.group(1)             
    code = []
    for word in name.split(' '):
        if not word: continue
        if word in ["to", "in", "of", "for", "the", "a", "&", "-", "or", "and"]: continue
        m = re.search('([A-Z][A-Z]+)', word)
        if m:
            if len(code) > 0: code.append(' ')
            code.extend(m.group(1))
            code.append(' ')
        elif len(word) <= 4:
            code.extend(word)
        else:
            code.extend(word[0:3])
    return ''.join(code).strip() 

def getGroupName(name):
    m = re.search('(.+) - (.+)', name)
    if m:
        return m.group(2)
    return name
    
def getGroup(name):
    group = hibSession.createQuery("from StudentGroup where groupName = :name and session = :sessionId").setLong("sessionId", session.getUniqueId()).setString("name", getGroupName(name)).setMaxResults(1).uniqueResult();
    if not group:
        log.info("Creating group for name %s" % name)
        group = StudentGroup()
        group.setSession(session)
        group.setGroupAbbreviation(getGroupCode(name));
        group.setGroupName(getGroupName(name));
        group.setUniqueId(hibSession.save(group))
    return group

def addClass(course2classes, group, subject, courseNbr, crn, title):
    clazz = hibSession.createQuery("select c from BannerSection bs inner join bs.bannerSectionToClasses as bstc, Class_ c where bs.session = :sessionId and bs.crn = :crn and bstc.classId = c.uniqueId").setLong("sessionId", session.getUniqueId()).setInteger("crn", crn).setMaxResults(1).uniqueResult()
    course = hibSession.createQuery("select co from BannerSection bs, CourseOffering co where bs.session = :sessionId and bs.crn = :crn and bs.bannerConfig.bannerCourse.courseOfferingId = co.uniqueId").setLong("sessionId", session.getUniqueId()).setInteger("crn", crn).setMaxResults(1).uniqueResult()
    if clazz and course:
        log.debug(clazz.getClassLabelWithTitle(course))
        classes = None
        if course in course2classes:
            classes = course2classes[course]
        else:
            classes = []
            course2classes[course] = classes
        classes.append(clazz)
    else:
        log.error("Class %s %s %d not found." % (subject, courseNbr, crn))
        
def isParent(c1, c2):
    if c2.getParentClass():
        if c1 == c2.getParentClass(): return True
        return isParent(c1, c2.getParentClass())
    return False

def hasChild(clazz, classes):
    for c in classes:
        if isParent(clazz, c): return True
    return False

def createReservations(group, course2classes):
    for course in course2classes.keys():
        log.info("Checking reservation for %s..." % course.getCourseName())
        reservation = hibSession.createQuery("from StudentGroupReservation where instructionalOffering = :offeringId and group = :groupId").setLong("offeringId", course.getInstructionalOffering().getUniqueId()).setLong("groupId", group.getUniqueId()).uniqueResult()
        if not reservation:
            reservation = StudentGroupReservation()
            reservation.setGroup(group)
            reservation.setInstructionalOffering(course.getInstructionalOffering())
            reservation.setClasses(HashSet())
        else:
            reservation.getClasses().clear()
        classes = course2classes[course]
        for clazz in classes:
            if not hasChild(clazz, classes):
                reservation.getClasses().add(clazz)
                log.debug("add %s" % clazz.getClassLabel(course))
            else:
                log.debug("skip %s" % clazz.getClassLabel(course))
        hibSession.saveOrUpdate(reservation)

lines = csv.reader(file.getString('utf-8').split('\n'), delimiter=",", quotechar='"')

group = None
header = True
course2classes = None
for line in lines:
    if not line or not line[2]:
        if group: createReservations(group, course2classes)
        group = None
        continue
    if header:
        if "Learning Community" == line[0]: header = False
        continue
    if not group and line[0]:
        group = getGroup(line[0])
        course2classes = {}
        print "Group %s - %s" % (group.getGroupAbbreviation(), group.getGroupName())
    if line[2] and line[3] and line[4]:
        subject = line[3].strip()
        courseNbr = line[4].strip()
        title = line[5]
        for extId in line[2].split(';'):
            addClass(course2classes, group, subject, courseNbr, int(extId.strip()), title)
if group: createReservations(group, course2classes)]]></body>
</script>
<script name="Learning Communities: Create Course Demands" permission="Student Group Edit" engine="python" created="Fri Jan 22 10:10:50 EST 2016">
  <description><![CDATA[Using existing student groups and student group reservations, make sure that the students enrolled in these groups are requesting courses for which they do have reservations created (on top of their existing demands, if any).]]></description>
  <parameter name="statusRef" label="Status" type="reference(StudentSectioningStatus)" default="Batch: LC"/>
  <body><![CDATA[from org.unitime.timetable.model import CourseDemand
from org.unitime.timetable.model import CourseRequest
from org.unitime.timetable.model import StudentSectioningStatus
from java.util import Date
from java.util import HashSet

groups = hibSession.createQuery("from StudentGroup where session = :sid").setLong("sid", session.getUniqueId()).list()

status = None
if statusRef:
  status = StudentSectioningStatus.getStatus(statusRef, session.getUniqueId(), hibSession)
ts = Date()

for group in groups:
  reservations = hibSession.createQuery("from StudentGroupReservation where group = :gid order by uniqueId").setLong("gid", group.getUniqueId()).list()
  for student in group.students:
      log.info("%s %s" % (student.getExternalUniqueId(), student.getName("last-first-middle")))
      if status:
        student.setSectioningStatus(status);
      priority = 0
      for cd in student.getCourseDemands():
        if priority <= cd.getPriority() and not cd.isAlternative(): priority = cd.getPriority() + 1
      for r in reservations:
        included = False
        for cd in student.getCourseDemands():
          for cr in cd.getCourseRequests():
            if cr.getCourseOffering() == r.getInstructionalOffering().getControllingCourseOffering():
              included = True
        if included: continue
        log.debug(r.getInstructionalOffering().getControllingCourseOffering().getCourseNameWithTitle())
        cd = CourseDemand()
        cd.setCourseRequests(HashSet())
        cd.setStudent(student)
        student.getCourseDemands().add(cd)
        cd.setAlternative(False)
        cd.setPriority(priority)
        priority = priority + 1
        cd.setWaitlist(False)
        cd.setTimestamp(ts)
        cr = CourseRequest()
        cd.getCourseRequests().add(cr)
        cr.setCourseDemand(cd)
        cr.setAllowOverlap(False)
        cr.setCredit(0)
        cr.setOrder(0)
        cr.setCourseOffering(r.getInstructionalOffering().getControllingCourseOffering())
        hibSession.saveOrUpdate(student);
]]></body>
</script>
</scripts>